<!DOCTYPE html>
<html lang="he">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>מערכת תזכורות מקצועית</title>
<style>
body { font-family: Arial, sans-serif; direction: rtl; margin:0; padding:20px; background:#f0f2f5; }
h1 { text-align:center; color:#2E71B3; }
.card { background:#fff; padding:20px; border-radius:12px; box-shadow:0 8px 20px rgba(0,0,0,.1); margin-bottom:20px; transition: transform 0.3s ease; }
.card:hover { transform: translateY(-2px); }
table { width:100%; border-collapse:collapse; margin-top:10px; }
th,td { padding:10px; border-bottom:1px solid #ddd; text-align:center; }
th { cursor:pointer; background:#f9f9f9; }
tr:hover { background:#f1f1f1; }
button { padding:8px 14px; border:none; border-radius:8px; cursor:pointer; margin:2px; font-weight:bold; transition: all 0.3s ease; }
button:hover { opacity:0.85; transform:scale(1.05); }
.add-btn { background:#49C449; color:white; }
.edit-btn { background:#5bc0de; color:white; }
.delete-btn { background:#F52116; color:white; }
.done-btn, .defer-btn { background:#FFA500; color:white; }
.done-status { color:green; font-weight:bold; }
.open-status { color:orange; font-weight:bold; }
#toast { position:fixed; top:30px; right:50%; transform:translateX(50%); padding:12px 20px; border-radius:8px; opacity:0; pointer-events:none; transition:opacity .4s, transform .4s; z-index:2000; color:#fff; }
#toast.success { background:green; }
#toast.error { background:red; }
#toast.info { background:#555; }
#toast.show { opacity:1; transform:translateX(50%) translateY(0); }
input,select { padding:8px; width:20%; margin:5px 0; border-radius:8px; border:1px solid #ccc; box-sizing:border-box; transition: all 0.3s ease; }
input:focus, select:focus { border-color:#2E71B3; outline:none; box-shadow:0 0 5px rgba(46,113,179,0.5); }
.search-box { margin-bottom:10px; display:flex; gap:6px; flex-wrap:wrap; }
.pagination { display:flex; justify-content:center; margin-top:10px; gap:6px; flex-wrap:wrap; }
.pagination button { padding:6px 10px; border-radius:6px; }
.popup-overlay { position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.4); display:flex; align-items:center; justify-content:center; z-index:3000; opacity:0; pointer-events:none; transition: opacity 0.3s ease; }
.popup-overlay.show { opacity:1; pointer-events:auto; }
.popup { background:#fff; padding:20px; border-radius:12px; max-width:400px; max-height:80vh; overflow-y:auto; box-shadow:0 8px 20px rgba(0,0,0,0.3); transform:translateY(-50px); transition: transform 0.3s ease; }
.popup.show { transform:translateY(0); }
.popup h3 { margin-top:0; }
.popup button { width:100%; margin:5px 0; }
</style>
</head>
<body>
<h1>מערכת תזכורות מקצועית</h1>

<div class="card">
<h2>הוספת תזכורת חדשה</h2>
<select id="reminderCustomer">
    <option value="">בחר לקוח</option>
</select>
<input type="text" id="reminderText" placeholder="תיאור התזכורת">
<input type="datetime-local" id="reminderTime">
<button class="add-btn" onclick="addReminder()" title="הוסף תזכורת חדשה">💾 הוסף תזכורת</button>
<button class="delete-btn" onclick="deleteAllReminders()" title="מחק את כל התזכורות">🗑️ מחק הכל</button>
</div>

<div class="card">
<div class="search-box">
    <input type="text" id="searchInput" placeholder="חיפוש תזכורות">
    <button onclick="searchReminder()" title="חפש תזכורות">🔍 חפש</button>
    <button onclick="resetSearch()" title="אפס חיפוש">🧹 איפוס</button>
</div>

<table id="reminderTable">
<thead>
<tr>
<th>#</th>
<th>לקוח</th>
<th>תזכורת</th>
<th>תאריך ושעה</th>
<th>סטטוס</th>
<th>פעולות</th>
</tr>
</thead>
<tbody></tbody>
</table>
<div class="pagination" id="pagination"></div>
</div>

<div id="toast"></div>

<!-- Popup -->
<div class="popup-overlay" id="popupOverlay">
    <div class="popup" id="popupContent"></div>
</div>

<script>
(function(){
    let customers = JSON.parse(localStorage.getItem('customers')) || [
        {id:1, name:'דוד לוי'},
        {id:2, name:'רונית כהן'}
    ];

    let reminders = JSON.parse(localStorage.getItem('reminders')) || [];
    let currentPage = 0;
    const PAGE_SIZE = 5;

    function saveData() { localStorage.setItem('reminders', JSON.stringify(reminders)); }

    function toast(msg, type="info"){
        const t = document.getElementById('toast');
        t.innerText = msg;
        t.className = 'show ' + type;
        setTimeout(()=>t.className='',3000);
    }

    function populateCustomerDropdown() {
        const sel = document.getElementById('reminderCustomer');
        sel.innerHTML="<option value=''>בחר לקוח</option>";
        customers.forEach(c => sel.innerHTML += `<option value="${c.id}">${c.name}</option>`);
    }

    function renderTable(data=reminders){
        const tbody = document.querySelector('#reminderTable tbody');
        tbody.innerHTML = "";
        if(data.length === 0){
            const tr = document.createElement('tr');
            tr.innerHTML = `<td colspan="6" style="padding:12px; color:#555; font-style:italic;">אין תזכורות להצגה</td>`;
            tbody.appendChild(tr);
            renderPagination(0);
            return;
        }
        const start = currentPage * PAGE_SIZE;
        const pageReminders = data.slice(start, start + PAGE_SIZE);
        pageReminders.forEach((r,i)=>{
            const tr = document.createElement('tr');
            tr.innerHTML = `
            <td>${start+i+1}</td>
            <td>${r.customerName}</td>
            <td>${r.text}</td>
            <td>${new Date(r.time).toLocaleString()}</td>
            <td class="${r.done?'done-status':'open-status'}">${r.done?"בוצעה":"פתוח"}</td>
            <td>
                <button class="edit-btn" onclick="editReminder(${r.id})">✏️</button>
                <button class="delete-btn" onclick="deleteReminder(${r.id})">🗑️</button>
            </td>`;
            tbody.appendChild(tr);
        });
        renderPagination(data.length);
    }

    function renderPagination(total){
        const pages = Math.ceil(total / PAGE_SIZE);
        const container = document.getElementById('pagination');
        container.innerHTML = "";
        if(pages < 2) return;
        for(let i=0;i<pages;i++){
            const btn = document.createElement('button');
            btn.innerText = i+1;
            if(i===currentPage) btn.style.fontWeight="bold";
            btn.onclick = ()=>{ currentPage=i; renderTable(); };
            container.appendChild(btn);
        }
    }

    window.addReminder = function(){
        const cid = document.getElementById('reminderCustomer').value;
        const text = document.getElementById('reminderText').value.trim();
        const time = document.getElementById('reminderTime').value;
        if(!cid || !text || !time){ toast("מלא את כל השדות", "error"); return; }
        if(new Date(time) < new Date()){ toast("לא ניתן להוסיף תזכורת בעבר", "error"); return; }

        // מניעת כפילויות לפי לקוח ושעה
        const exists = reminders.some(r => r.customerId == cid && r.time === time);
        if(exists){ toast("ללקוח זה כבר קיימת תזכורת בשעה זו", "error"); return; }

        const cust = customers.find(c=>c.id==cid);
        reminders.push({id:Date.now(), customerId:cid, customerName:cust.name, text, time, done:false, alerted:false});
        saveData();
        document.getElementById('reminderText').value="";
        document.getElementById('reminderCustomer').value="";
        document.getElementById('reminderTime').value="";
        renderTable();
        toast("תזכורת נוספה בהצלחה", "success");
    }

    window.deleteReminder = function(id){
        if(!confirm("האם אתה בטוח שברצונך למחוק את התזכורת?")) return;
        reminders = reminders.filter(r=>r.id!==id);
        saveData();
        renderTable();
        toast("תזכורת נמחקה", "success");
    }

    window.deleteAllReminders = function(){
        if(!confirm("האם אתה בטוח שברצונך למחוק את כל התזכורות?")) return;
        reminders = [];
        saveData();
        renderTable();
        toast("כל התזכורות נמחקו", "success");
    }

    window.editReminder = function(id){
        const r = reminders.find(r=>r.id===id);
        const newText = prompt("ערוך תזכורת", r.text);
        if(newText!==null){
            r.text = newText.trim() || r.text;
            saveData();
            renderTable();
            toast("תזכורת עודכנה", "success");
        }
    }

    window.searchReminder = function(){
        const val = document.getElementById('searchInput').value.trim().toLowerCase();
        if(!val){ toast("טקסט חיפוש ריק", "error"); return; }
        const filtered = reminders.filter(r=> r.text.toLowerCase().includes(val) || r.customerName.toLowerCase().includes(val));
        currentPage = 0;
        renderTable(filtered);
    }

    window.resetSearch = function(){
        document.getElementById('searchInput').value="";
        currentPage=0;
        renderTable();
    }

    function showReminderPopup(r) {
        const overlay = document.getElementById('popupOverlay');
        const popup = document.getElementById('popupContent');
        popup.innerHTML = `
            <h3>תזכורת: ${r.customerName}</h3>
            <p>${r.text}</p>
            <button id="doneBtn">✅ סמן כבוצע</button>
            <button id="defer5Btn">⏱️ 5 דק'</button>
            <button id="defer10Btn">⏱️ 10 דק'</button>
            <button id="defer15Btn">⏱️ 15 דק'</button>
        `;
        overlay.classList.add('show');
        popup.classList.add('show');

        document.getElementById('doneBtn').onclick = () => {
            r.done = true; closePopup(); saveData(); renderTable(); toast("תזכורת סומנה כבוצע", "success");
        };
        document.getElementById('defer5Btn').onclick = () => { deferMinutes(r,5); closePopup(); };
        document.getElementById('defer10Btn').onclick = () => { deferMinutes(r,10); closePopup(); };
        document.getElementById('defer15Btn').onclick = () => { deferMinutes(r,15); closePopup(); };

        overlay.onclick = (e) => { if(e.target===overlay) closePopup(); };

        function closePopup(){ overlay.classList.remove('show'); popup.classList.remove('show'); }
    }

    function deferMinutes(r, minutes){
        r.time = new Date(new Date().getTime() + minutes*60000).toISOString();
        r.done = false; r.alerted = false;
        saveData(); renderTable();
        toast(`תזכורת נדחתה ב-${minutes} דקות`, "info");
    }

    function checkReminders(){
        const now = new Date();
        reminders.forEach(r=>{
            if(!r.done && !r.alerted && new Date(r.time) <= now){
                r.alerted = true; saveData(); renderTable(); showReminderPopup(r);
            }
        });
    }

    populateCustomerDropdown();
    renderTable();
    setInterval(checkReminders, 1000);

})();
</script>
</body>
</html>
